#!/bin/bash

##--------------------------
# takes target FROM and TO positions, query cultivar's SNPs in vcf format as input, and generate a list of
# cultivars from 3kRGP as close-relatives of the query cultivar based on the best matched SNP profile (haplovars) as output.

# softlink vcf files
# For the findbySNP to work, it looks at the intersection of SNP positions
# of cultivar vcf against the SNP-Seek dataset.
# It is critical to make sure the SNP position in vcf files is in the format of "1 2345"
# as intersection of "OsjChr1 2345" and "1 2345" will not work apparently.
# The WGvarSNP generates vcf files with OsjChr1 for chromosome1.
# Change the CHR name from "OsjChr1" to "1" for vcf files.

## Haplovar identification
# identify.py can run with a plink dataset and a sample name, in which case it will 
# compare this sample against all others in the given dataset.
# Note that this will not work unless a sample with a given name exists in the dataset.
# Additionally, one can specify a range and an output file.
# do python2 ${bin_DIR}/identify.py ${prereq_DIR}/${PLINKFNAME} gatk_${file}_env_snp_${TARGET}.vcf > gatk_${file}_env_snp_${TARGET}_${PLINKFNAME}.haplovar

##---------------------------------------------------
source ./0SOURCE
# include the TRegGA.source
TRegGA_DIR=`dirname $PWD`
source ${TRegGA_DIR}/TRegGA.source
\cp ${TRegGA_DIR}/TRegGA.sample .

cd ${run_DIR}
mkdir -p findbySNP
cd findbySNP
\cp ${TRegGA_DIR}/TRegGA.sample .
len=`awk 'END { print NR }' TRegGA.sample`
for ((k=1; k<=$len; k++))
do
head -$k TRegGA.sample | tail -1 > rec
CULTIVAR=`cut -d "|" -f1 rec`
SYNONYM=`cut -d "|" -f2 rec`
python2 ${bin_DIR}/identify.py ${prereq_DIR}/${PLINKFNAME} -name ${CULTIVAR} \
-range ${CHR} ${FROM} ${TO} \
-out ${CULTIVAR}-on-${TARGET}_${PLINKFNAME}.haplovar &

# remove comments and sort the list by distance
awk '$1 != "#" ' ${CULTIVAR}-on-${TARGET}_${PLINKFNAME}.haplovar | sort -k 2 -n > \
 ${CULTIVAR}-on-${TARGET}_${PLINKFNAME}_sorted.haplovar

# Find common haplovars by selection top 30 and sort
head -30 ${CULTIVAR}-on-${TARGET}_${PLINKFNAME}_sorted.haplovar | cut -f1 >> top30
done

# select cultivars that are present in all three haplovars
sort top30 | uniq -c | grep -w "3" > top30_sorted_uniq
      3 CX134
      3 CX369
      3 IRIS_313-10177
      3 IRIS_313-10605
      3 IRIS_313-10861
      3 IRIS_313-10892
      3 IRIS_313-10976
      3 IRIS_313-11051
      3 IRIS_313-11054
      3 IRIS_313-11057
      3 IRIS_313-11062
      3 IRIS_313-11064
      3 IRIS_313-11163
      3 IRIS_313-11636

# Transform the top30_sorted_uniq into TRegGA.sample with CULTIVAR|SYNONYM format
CX134|IRBB7
IRIS 313-10605|DV86
CX369|IRBB62
IRIS 313-10177|DA_GANG_ZHAN
IRIS 313-10861|ARC_11276
IRIS 313-10892|ARC_12920
IRIS 313-10976|LAKHSMI_DIGHA
IRIS 313-11051|AUS_242
IRIS 313-11054|AUS_295
IRIS 313-11057|AUS_308
IRIS 313-11062|BEGUNBICHI_33
IRIS 313-11064|BORO_275
IRIS 313-11163|NATEL_BORO
IRIS 313-11636|NCS271_A

# run TRegGA with modified Makefile_denovo-orig
# GFO-i     =       0#  maximum number of iterations; set to 0 to not run GapFiller
\cp ${TRegGA_DIR}/assembly/denovo/Makefile_denovo-orig ${TRegGA_DIR}/assembly/denovo/Makefile_denovo-orig-orig
sed -i 's/GFO-i     =       3#/GFO-i     =       0#/;' ${TRegGA_DIR}/assembly/denovo/Makefile_denovo-orig

# generate scripts runTRegGA_${SYNONYM}-on-OsjXa7
sh TRegGA-Xa7.run

# run files sequentially
sh runTRegGA_ARC_11276-on-OsjXa7 && runTRegGA_ARC_12920-on-OsjXa7 && runTRegGA_AUS_242-on-OsjXa7
sh runTRegGA_AUS_295-on-OsjXa7 && runTRegGA_AUS_308-on-OsjXa7 && runTRegGA_BEGUNBICHI_33-on-OsjXa7
sh runTRegGA_BORO_275-on-OsjXa7 && runTRegGA_DA_GANG_ZHAN-on-OsjXa7 && runTRegGA_LAKHSMI_DIGHA-on-OsjXa7
sh runTRegGA_NATEL_BORO-on-OsjXa7 && runTRegGA_NCS271_A-on-OsjXa7

# 




# Report back to ThaRegGA
\cp *.haplovar ${data_DIR)

